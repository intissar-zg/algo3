/////////Solution1 ////////////

PROCEDURE dot_product(V1:ARRAY_OF INTEGER,V2:ARRAY_OF INTEGER,ps:integer)
VAR
    i:INTEGER
    BEGIN
    FOR i FROM 1 TO V1.length STEP 1  DO
       PS:=PS+(V1[i]*V2[i])
    END_FOR
    write("produit scalaire est:"ps)

END


ALGORITHM OrthogonalProcedure
VAR
    psc,i,j:INTEGER
    t1,t2 : ARRAY_OF INTEGER[];
BEGIN
REPEAT
    FOR i FROM 0 TO t1.length-1 STEP 1  DO
       write("donner l'élément de vacteur1")
       read(t1[i])
   END_FOR
   FOR j FROM 0 TO t2-1 STEP 1  DO
       write("donner l'élément de vacteur 2")
       read(t2[j])
   END_FOR
UNTIL (t1.length=t2.length)
  dot_product(t1,t2,ps)
   IF (ps=0) THEN
    write ("vecteurs orthogonaux")
    ELSE
     write("vecteurs non orthogonaux")
    END_IF
END

///////////////////Solution2 //////////////
ALGORITHM OrthogonalFunction
VAR
   PS ,i,j:INTEGER; 
   t1,t2 : ARRAY_OF INTEGER[];
    
BEGIN
REPEAT
    FOR i FROM 0 TO t1.length-1 STEP 1  DO
       write("donner l'élément de vacteur1")
       read(t1[i])
   END_FOR
   FOR j FROM 0 TO t2-1 STEP 1  DO
       write("donner l'élément de vacteur 2")
       read(t2[j])
   END_FOR
UNTIL (t1.length=t2.length)

FUNCTION dot_product(V1:ARRAY_OF INTEGER, V2: ARRAY_OF INTEGER) : INTEGER
VAR
     PS,i:INTEGER
BEGIN
    FOR i FROM 1 TO V1.length STEP 1  DO
         PS:=PS+(V1[i]*V2[i])
    END_FOR
    RETURN PS ;
    END
     IF (PS=0) THEN
    write ("vecteurs orthogonaux")
    ELSE
     write("vecteurs non orthogonaux")
    END_IF
END
